def anchor_target_single_hbb_obb_rbox(flat_anchors,
                                      valid_flags,
                                      gt_bboxes,
                                      gt_bboxes_ignore,
                                      gt_labels,
                                      img_meta,
                                      bbox_preds,
                                      target_means,
                                      target_stds,
                                      cfg,
                                      label_channels=1,
                                      sampling=True,
                                      unmap_outputs=True):
    inside_flags = anchor_inside_flags(flat_anchors, valid_flags,
                                       img_meta['img_shape'][:2],
                                       cfg.allowed_border)
    if not inside_flags.any():
        return (None, ) * 6
    # assign gt and sample anchors
    anchors = flat_anchors[inside_flags, :].double()
    anchors = rect2rbox(anchors)

    if sampling:
        bbox_assigner = build_assigner(cfg.assigner)
        bbox_sampler = build_sampler(cfg.sampler)
        assign_result = bbox_assigner.assign(anchors, gt_bboxes, gt_bboxes_ignore,
                                             gt_labels)
        sampling_result = bbox_sampler.sample(assign_result, anchors, gt_bboxes,
                                              gt_labels)
    else:
        bbox_assigner = build_assigner(cfg.assigner)
        bbox_preds = bbox_preds[inside_flags]
        if 'Das' in cfg.assigner.type:
            assign_result = bbox_assigner.assign(anchors, gt_bboxes,bbox_preds,
                                                 gt_bboxes_ignore, gt_labels)
                                                 
        else:
            assign_result = bbox_assigner.assign(anchors, gt_bboxes,
                                                 gt_bboxes_ignore, gt_labels)
        bbox_sampler = PseudoSampler()
        sampling_result = bbox_sampler.sample(assign_result, anchors,
                                              gt_bboxes)

    num_valid_anchors = anchors.shape[0]
    bbox_targets = torch.zeros_like(anchors)
    bbox_weights = torch.zeros_like(anchors)
    labels = anchors.new_zeros(num_valid_anchors, dtype=torch.long)
    label_weights = anchors.new_zeros(num_valid_anchors, dtype=torch.float)

    pos_inds = sampling_result.pos_inds
    neg_inds = sampling_result.neg_inds
    if len(pos_inds) > 0:
        if cfg.get('calc_offset') == False:
            pos_bbox_targets = sampling_result.pos_gt_bboxes
        else:
            pos_bbox_targets = rbox2delta(sampling_result.pos_bboxes,
                                        sampling_result.pos_gt_bboxes,
                                        target_means, target_stds)
        bbox_targets[pos_inds, :] = pos_bbox_targets
        bbox_weights[pos_inds, :] = 1.0
        if gt_labels is None:
            labels[pos_inds] = 1
        else:
            labels[pos_inds] = gt_labels[sampling_result.pos_assigned_gt_inds]
        if cfg.pos_weight <= 0:
            label_weights[pos_inds] = 1.0
        else:
            label_weights[pos_inds] = cfg.pos_weight
    if len(neg_inds) > 0:
        label_weights[neg_inds] = 1.0

    # map up to original set of anchors
    if unmap_outputs:
        num_total_anchors = flat_anchors.size(0)
        labels = unmap(labels, num_total_anchors, inside_flags)
        label_weights = unmap(label_weights, num_total_anchors, inside_flags)
        bbox_targets = unmap(bbox_targets, num_total_anchors, inside_flags)
        bbox_weights = unmap(bbox_weights, num_total_anchors, inside_flags)

    return (labels, label_weights, bbox_targets, bbox_weights, pos_inds,
            neg_inds)